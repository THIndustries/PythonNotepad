import json
import datetime

def load_notes():
    '''
    Функция, открывающая json файл и пытается загрузить данные заметок из него в формате json.
    :return: Возвращает массивв данных, либо пустой список, если файл пустой или ещё не существует.
    '''
    try:
        with open("notes.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_notes(notes):
    '''
    Функция, которая принимает список заметок в качестве агрумента и сохраняет в файл.
    :param notes: праметр на вход
    :return:
    '''
    with open("notes.json", "w") as file:
        json.dump(notes, file, indent=2)

def add_note():
    '''
    Функция для добавления новой заметки, запрашивает у пользователя заголовок и саму заметку,
    а также автоматически добавляет текущую дату и время создания заметки.
    Затем создается словарь note с данными заметки, и он добавляется в общий список заметок notes.
    После добавления заметки, список заметок сохраняется в файл.
    Если заметка успешно добавлена, выводится сообщение об успехе.
    '''
    title = input("Введите заголовок заметки: ")
    message = input("Введите тело заметки: ")
    created_at = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    note = {
        "id": len(notes) + 1,
        "title": title,
        "message": message,
        "created_at": created_at
    }

    notes.append(note)
    save_notes(notes)
    print("Заметка успешно добавлена.")

def display_notes():
    '''
    Эта функция выводит список всех заметок, хранящихся в переменной notes.
    Если список заметок пуст, выводится сообщение о том, что список пуст.
    Иначе, для каждой заметки в списке, выводится ее ID, заголовок, тело и дата/время создания.
    :return:
    '''
    if not notes:
        print("Список заметок пуст.")
        return

    for note in notes:
        print(f"ID: {note['id']}")
        print(f"Заголовок: {note['title']}")
        print(f"Тело: {note['message']}")
        print(f"Дата/время создания: {note['created_at']}")
        print("----------")

def filter_notes_by_date():
    '''
    Эта функция позволяет пользователю фильтровать заметки по заданной дате.
    Пользователю предлагается ввести дату в формате "гггг-мм-дд".
    Если вводимая дата корректна, то происходит фильтрация заметок по этой дате.
    Функция выводит список всех заметок, созданных в указанную дату, если такие заметки есть.
    :return:
    '''
    date_str = input("Введите дату для фильтрации (гггг-мм-дд): ")
    try:
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        print("Некорректный формат даты.")
        return

    filtered_notes = [note for note in notes if note["created_at"].split()[0] == str(date)]
    if filtered_notes:
        print(f"Заметки за {date_str}:")
        for note in filtered_notes:
            print(f"ID: {note['id']}")
            print(f"Заголовок: {note['title']}")
            print(f"Тело: {note['message']}")
            print(f"Дата/время создания: {note['created_at']}")
            print("----------")
    else:
        print(f"Заметок за {date_str} не найдено.")

def delete_note():
    '''
    Эта функция позволяет пользователю удалить заметку по ее ID.
    Она выводит список всех заметок с их ID, после чего запрашивает у пользователя ввести ID заметки,
    которую необходимо удалить. Затем происходит удаление заметки с указанным ID из списка notes и
    сохранение обновленного списка в файл "notes.json". Если заметка с указанным ID успешно удалена,
    выводится соответствующее сообщение.
    :return:
    '''
    display_notes()
    id_to_delete = int(input("Введите ID заметки, которую хотите удалить: "))
    global notes
    notes = [note for note in notes if note["id"] != id_to_delete]
    save_notes(notes)
    print(f"Заметка с ID {id_to_delete} успешно удалена.")

def main():
    '''
    Это основная функция приложения. Она загружает список заметок из файла "notes.json" и запускает бесконечный цикл,
    который позволяет пользователю вводить команды. Приложение предоставляет пользователю следующие команды:
    :return:
    '''
    global notes
    notes = load_notes()

    while True:
        print("\nВведите вашу команду:")
        print("1. add - Добавить заметку")
        print("2. list - Просмотреть заметки")
        print("3. filter - Фильтрация заметок")
        print("4. delete - Удалить заметку")
        print("5. exit - Закрыть программу")

        command = input(">>> ").lower()

        if command == "add":
            add_note()
        elif command == "list":
            display_notes()
        elif command == "filter":
            filter_notes_by_date()
        elif command == "delete":
            delete_note()
        elif command == "exit":
            break
        else:
            print("Некорректная команда. Попробуйте снова.")

main()

'''
Общий поток работы приложения:

1.При запуске приложения загружается список заметок из файла "notes.json".
2. Выводится список доступных команд.
3. Пользователь может выбрать одну из команд, введя соответствующее ключевое слово.
4. В зависимости от выбранной команды, приложение выполняет соответствующую функцию.
5. В процессе выполнения функций могут выводиться сообщения о результатах операций или 
    запросы на ввод данных от пользователя.
6. При завершении работы с приложением, пользователь может ввести команду "exit" 
    для выхода из бесконечного цикла и завершения работы приложения.
'''